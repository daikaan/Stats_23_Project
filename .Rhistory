table(quantitative$attrition_flag_binary, quantitative$Credit_Limit)
chisq.test(quantitative$attrition_flag_binary, quantitative$Credit_Limit, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Total_Revolving_Bal)
chisq.test(quantitative$attrition_flag_binary, quantitative$Total_Revolving_Bal, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Avg_Open_To_Buy)
chisq.test(quantitative$attrition_flag_binary, quantitative$Avg_Open_To_Buy, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Total_Amt_Chng_Q4_Q1)
chisq.test(quantitative$attrition_flag_binary, quantitative$Total_Amt_Chng_Q4_Q1, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Total_Trans_Amt)
chisq.test(quantitative$attrition_flag_binary, quantitative$Total_Trans_Amt, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Total_Trans_Ct)
chisq.test(quantitative$attrition_flag_binary, quantitative$Total_Trans_Ct, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Total_Ct_Chng_Q4_Q1)
chisq.test(quantitative$attrition_flag_binary, quantitative$Total_Ct_Chng_Q4_Q1, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Avg_Utilization_Ratio)
chisq.test(quantitative$attrition_flag_binary, quantitative$Avg_Utilization_Ratio, correct=FALSE, simulate.p.value=TRUE)
table(quantitative$attrition_flag_binary, quantitative$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1)
chisq.test(quantitative$attrition_flag_binary, quantitative$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1, correct=FALSE, simulate.p.value=TRUE)
#histograms
hist(bank_data$Avg_Utilization_Ratio)
hist(log1p(bank_data$Avg_Utilization_Ratio))
hist(bank_data$Avg_Open_To_Buy)
hist(log1p(bank_data$Avg_Open_To_Buy))
hist(bank_data$Avg_Open_To_Buy)
cdplot(attrition_flag_binary~ Total_Trans_Ct, data=quantitative)
cdplot(attrition_flag_binary~ c(Total_Trans_Ct), data=quantitative)
cdplot(c(attrition_flag_binary) ~ Total_Trans_Ct, data=quantitative)
cdplot(factor(attrition_flag_binary)~ Total_Trans_Ct, data=quantitative)
cdplot(factor(attrition_flag_binary)~ Total_Revolving_Bal, data=quantitative)
#########
library("dplyr")
library("corrplot")
library("caTools")
#########
library("dplyr")
library("corrplot")
library("caTools")
library("ggpubr")
library("ROSE")
library("correlation")
library(moments) #to calculate skewness
library(olsrr) #to use ols_step_backward_p
library(MASS)
library(knitr)
library(forecast)
library(ggplot2)
library(PCAmixdata)
bank_data_origin <- read.csv('~/GitHub/Stats_23_Project/BankChurners.csv')
bank_data <- data.frame(bank_data_origin)
colSums(is.na(bank_data)) #there is no null value
#Dimension of dataset
dim(bank_data)
#Shows structure of dataset
str(bank_data)
#View the categorical variables
table(bank_data$Attrition_Flag)
table(bank_data$Gender)
table(bank_data$Education_Level)
table(bank_data$Marital_Status)
table(bank_data$Income_Category)
table(bank_data$Card_Category)
#Change Unknown value to NA
bank_data_NA <- data.frame(bank_data)
bank_data_NA[bank_data_NA=='Unknown'] <- NA
#Build a dataset without missing values
bank_data_withoutNA <- na.omit(bank_data_NA)
#We convert categorical variables into numerical
bank_data_withoutNA_quan <- data.frame(bank_data_withoutNA)
bank_data_withoutNA_quan$Attrition_Flag <- as.numeric(bank_data_withoutNA_quan$Attrition_Flag == "Attrited Customer")
bank_data_withoutNA_quan$Gender <- as.numeric(bank_data_withoutNA_quan$Gender == "F")
bank_data_withoutNA_quan <- bank_data_withoutNA_quan %>% rename("Is_Female" = "Gender")
order_education_level <- list("Unknown" = 0,
"Uneducated" = 1,
"High School" = 2,
"College" = 3,
"Graduate" = 4,
"Post-Graduate" = 5,
"Doctorate" = 6)
bank_data_withoutNA_quan$Education_Level <- unlist(order_education_level[as.character(bank_data_withoutNA_quan$Education_Level)])
order_Marital_Status <- list("Unknown" = 0,
"Single" = 1,
"Married" = 2,
"Divorced" = 3)
bank_data_withoutNA_quan$Marital_Status <- unlist(order_Marital_Status[as.character(bank_data_withoutNA_quan$Marital_Status)])
order_Income_Category <- list("Unknown" = 0,
"Less than $40K" = 1,
"$40K - $60K" = 2,
"$60K - $80K" = 3,
"$80K - $120K" = 4,
"$120K +" = 5)
bank_data_withoutNA_quan$Income_Category <- unlist(order_Income_Category[as.character(bank_data_withoutNA_quan$Income_Category)])
order_Card_Category <- list("Blue" = 1,
"Silver" = 2,
"Gold" = 3,
"Platinum" = 4)
bank_data_withoutNA_quan$Card_Category <- unlist(order_Card_Category[as.character(bank_data_withoutNA_quan$Card_Category)])
#delete naive...1 and 2
bank_data_withoutNA_quan <- subset(bank_data_withoutNA_quan, select = -c(Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1, Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2))
cleaned_bank_data_withoutNA_quan <- bank_data_withoutNA_quan
age.exc.list <- boxplot.stats(cleaned_bank_data_withoutNA_quan$Customer_Age)$out
card.exc.list <- c(2, 3, 4)
cleaned_bank_data_withoutNA_quan <- subset(cleaned_bank_data_withoutNA_quan,!((Customer_Age %in% age.exc.list)| (Card_Category %in% card.exc.list)))
cleaned_bank_data_withoutNA_quan
#Correlation matrix
cor_mat_new <- cor(bank_data_withoutNA_quan[2:15])
corrplot(cor_mat_new,method = "number",type = "upper", tl.pos = "td",tl.cex=0.5, tl.col = "black" ,diag = FALSE)
#calculate skewness in quant to find which are normally dist
skewness(cleaned_bank_data_withoutNA_quan$Customer_Age)
skewness(cleaned_bank_data_withoutNA_quan$Dependent_count)
skewness(cleaned_bank_data_withoutNA_quan$Months_on_book)
skewness(cleaned_bank_data_withoutNA_quan$Total_Relationship_Count)
skewness(cleaned_bank_data_withoutNA_quan$Months_Inactive_12_mon)
skewness(cleaned_bank_data_withoutNA_quan$Contacts_Count_12_mon)
skewness(cleaned_bank_data_withoutNA_quan$Total_Revolving_Bal)
skewness(cleaned_bank_data_withoutNA_quan$Total_Trans_Ct)
skewness(cleaned_bank_data_withoutNA_quan$Avg_Utilization_Ratio)
skewness(cleaned_bank_data_withoutNA_quan$Is_Female)
skewness(cleaned_bank_data_withoutNA_quan$Education_Level)
skewness(cleaned_bank_data_withoutNA_quan$Marital_Status)
skewness(cleaned_bank_data_withoutNA_quan$Income_Category)
#we should take log to normalize and calculate skewness again for these
skewness(cleaned_bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1)
skewness(cleaned_bank_data_withoutNA_quan$Total_Trans_Amt)
skewness(cleaned_bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1)
skewness(cleaned_bank_data_withoutNA_quan$Avg_Open_To_Buy)
skewness(cleaned_bank_data_withoutNA_quan$Credit_Limit)
#they are normally dist now
skewness(log1p(cleaned_bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1))
skewness(log1p(cleaned_bank_data_withoutNA_quan$Total_Trans_Amt))
skewness(log1p(cleaned_bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1))
skewness(log1p(cleaned_bank_data_withoutNA_quan$Avg_Open_To_Buy))
skewness(log1p(cleaned_bank_data_withoutNA_quan$Credit_Limit))
log_cleaned_bank_data_withoutNA_quan <- cleaned_bank_data_withoutNA_quan
log_cleaned_bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1 <- log1p(log_cleaned_bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1)
colnames(log_cleaned_bank_data_withoutNA_quan)[20] <- "log_Total_Ct_Chng_Q4_Q1"
log_cleaned_bank_data_withoutNA_quan$Total_Trans_Amt <- log1p(log_cleaned_bank_data_withoutNA_quan$Total_Trans_Amt)
colnames(log_cleaned_bank_data_withoutNA_quan)[18] <- "log_Total_Trans_Amt"
log_cleaned_bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1 <- log1p(log_cleaned_bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1)
colnames(log_cleaned_bank_data_withoutNA_quan)[17] <- "log_Total_Amt_Chng_Q4_Q1"
log_cleaned_bank_data_withoutNA_quan$Avg_Open_To_Buy <- log1p(log_cleaned_bank_data_withoutNA_quan$Avg_Open_To_Buy)
colnames(log_cleaned_bank_data_withoutNA_quan)[16] <- "log_Avg_Open_To_Buy"
log_cleaned_bank_data_withoutNA_quan$Credit_Limit <- log1p(log_cleaned_bank_data_withoutNA_quan$Credit_Limit)
colnames(log_cleaned_bank_data_withoutNA_quan)[14] <- "log_Credit_Limit"
#since we have only one card category we can remove it
log_cleaned_bank_data_withoutNA_quan <- subset(log_cleaned_bank_data_withoutNA_quan, select = -c(Card_Category))
cleaned_bank_data_withoutNA_quan <- subset(cleaned_bank_data_withoutNA_quan, select = -c(Card_Category))
#Thresholds for classification:
threshold1 <- 0.4
threshold2 <- 0.5
threshold3 <- 0.6
set.seed(0987)
sample <- sample.split(log_cleaned_bank_data_withoutNA_quan$Attrition_Flag,SplitRatio = 0.75)
train <- subset(log_cleaned_bank_data_withoutNA_quan[2:20],sample == TRUE)
test <- subset(log_cleaned_bank_data_withoutNA_quan[2:20],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N = nrow(log_cleaned_bank_data_withoutNA_quan))$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, test) >= 0.5)*1
mean(test$Attrition_Flag == pred)
log_cleaned_bank_data_withoutNA_quan1 <- subset(log_cleaned_bank_data_withoutNA_quan, select = -c(Months_on_book))
set.seed(0987)
sample <- sample.split(log_cleaned_bank_data_withoutNA_quan1$Attrition_Flag,SplitRatio = 0.75)
train <- subset(log_cleaned_bank_data_withoutNA_quan1[2:19],sample == TRUE)
test <- subset(log_cleaned_bank_data_withoutNA_quan1[2:19],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N = nrow(log_cleaned_bank_data_withoutNA_quan))$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, test) >= 0.5)*1
mean(test$Attrition_Flag == pred)
log_cleaned_bank_data_withoutNA_quan2 <- subset(log_cleaned_bank_data_withoutNA_quan1, select = -c(Education_Level))
sample <- sample.split(log_cleaned_bank_data_withoutNA_quan2$Attrition_Flag,SplitRatio = 0.75)
train <- subset(log_cleaned_bank_data_withoutNA_quan2[2:18],sample == TRUE)
test <- subset(log_cleaned_bank_data_withoutNA_quan2[2:18],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N =7595)$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, test) >= 0.5)*1
mean(test$Attrition_Flag == pred)
log_cleaned_bank_data_withoutNA_quan3 <- subset(log_cleaned_bank_data_withoutNA_quan2, select = -c(Dependent_count))
sample <- sample.split(log_cleaned_bank_data_withoutNA_quan3$Attrition_Flag,SplitRatio = 0.75)
train <- subset(log_cleaned_bank_data_withoutNA_quan3[2:17],sample == TRUE)
test <- subset(log_cleaned_bank_data_withoutNA_quan3[2:17],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N =7595)$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, test) >= 0.5)*1
mean(test$Attrition_Flag == pred)
#accuracy for not remove anything case
bank_data_withoutNA_quan
bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1 <- log1p(bank_data_withoutNA_quan$Total_Ct_Chng_Q4_Q1)
colnames(bank_data_withoutNA_quan)[20] <- "log_Total_Ct_Chng_Q4_Q1"
bank_data_withoutNA_quan$Total_Trans_Amt <- log1p(bank_data_withoutNA_quan$Total_Trans_Amt)
colnames(bank_data_withoutNA_quan)[18] <- "log_Total_Trans_Amt"
bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1 <- log1p(bank_data_withoutNA_quan$Total_Amt_Chng_Q4_Q1)
colnames(bank_data_withoutNA_quan)[17] <- "log_Total_Amt_Chng_Q4_Q1"
bank_data_withoutNA_quan$Avg_Open_To_Buy <- log1p(bank_data_withoutNA_quan$Avg_Open_To_Buy)
colnames(bank_data_withoutNA_quan)[16] <- "log_Avg_Open_To_Buy"
bank_data_withoutNA_quan$Credit_Limit <- log1p(bank_data_withoutNA_quan$Credit_Limit)
colnames(bank_data_withoutNA_quan)[14] <- "log_Credit_Limit"
set.seed(0987)
sample <- sample.split(bank_data_withoutNA_quan$Attrition_Flag,SplitRatio = 0.75)
train <- subset(bank_data_withoutNA_quan[2:21],sample == TRUE)
test <- subset(bank_data_withoutNA_quan[2:21],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N = nrow(bank_data_withoutNA_quan))$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, train_mix) >= 0.5)*1
mean(train_mix$Attrition_Flag == pred)
#try to find accuracy with not normalized columns
set.seed(0987)
sample <- sample.split(cleaned_bank_data_withoutNA_quan$Attrition_Flag,SplitRatio = 0.75)
train <- subset(cleaned_bank_data_withoutNA_quan[2:20],sample == TRUE)
test <- subset(cleaned_bank_data_withoutNA_quan[2:20],sample == FALSE)
# Under-sampling
train_under <- ovun.sample(Attrition_Flag~.,data = train, method = "under")$data
# Over-sampling
train_over <- ovun.sample(Attrition_Flag~.,data = train, method = "over")$data
#Mixed Sampling with 40% of Attrited Customer
train_mix <- ovun.sample(Attrition_Flag~.,data = train, method = "both", p = 0.4, N = nrow(cleaned_bank_data_withoutNA_quan))$data
model <- glm(Attrition_Flag ~ ., data = train_mix, family = 'binomial')
summary(model)$coeff
summary(model)
pred <- (predict(model, test) >= 0.5)*1
mean(test$Attrition_Flag == pred)
View(bank_data_withoutNA_quan)
cdplot(factor(Attrition_Flag)~ log_Total_Ct_Chng_Q4_Q1, data=bank_data_withoutNA_quan)
addmargins(quantitative)
cars <- rbind(c(56, 52, 42), c(50, 83, 67), c(18, 51, 81))
rownames(cars) <- c("Large", "Medium", "Small")
colnames(cars) <- c("Large", "Medium", "Small")
cars
n <- sum(cars)
# add margins
cars.with.margins <- addmargins(cars)
cars.with.margins
bank_data <- read.csv('~/GitHub/Stats_23_Project/BankChurners.csv')
# client_num should be added to qualitative as well as primary key
# dependent_count to qualitative?
head(bank_data)
dim(bank_data) #10127 rows and 23 columns
summary(bank_data)
col = c('CLIENTNUM', 'Attrition_Flag', 'Customer_Age',	'Gender',	'Dependent_count', 'Education_Level',	'Marital_Status',	'Income_Category', 'Card_Category',	'Months_on_book',	'Total_Relationship_Count', 'Months_Inactive_12_mon',	'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',	'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1',	'Avg_Utilization_Ratio',	'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',	'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2')
library(knitr)
library(forecast)
library(ggplot2)
library(PCAmixdata)
library(dplyr)
#FEATURES: (I copied them from another project)
# No NA
# Clientum: represents the unique IDs of customers. It is formed by a unique sequence of 9 digits. There is a total of 10,127 unique customers in the datasets.
# Attrition_Flag: this target/output variable represents the current status of customers. It has two unique values: one is Existing Customer (current customer) and Attrited Customer (churned customer).
# Customer_Age: this variable consist of the age of customers. The age range of customers is between 27 and 73.
# Gender: this variable is coded as F for Female and M for Male.
# Dependent_count: this variable represents the number of dependents associated with a customer.
# Education_Level: this variable represents the educational qualification of a customer. It consist of 7 unique values which are High School, Graduate, Uneducated, College, Post-graduate, Doctorate and Unknown. The Unknown group has 1519 customers.
# Marital_Status: this variable represents the marital status of customers. It has 4 unique values which are Married, Single, Unknown, Divorced. The Unknown group has 749 customers.
# Income_Category: this variable represents the annual income category of card holder: Less than  40K,
# 40k- 60K,
# 60K- 80K,
# 80K-120K, $120+, Unknown. The Unknown group has 1112 customer in this category.
# Card_Category: this is a product variable that represents the credit card type. It has 4 unique values - Blue, Gold, Silver and Platinum.
# Months_on_book: represents the number of months (period) the account holder has been a customer in the bank.
# Total_Relationship_Count: represents the number of products held by the customer.
# Months_Inactive_12_mon: this is the number of months a customer has been inactive in the last 12 months (1 year).
# Contacts_Count_12_mon: this is the number of times a customer has made contact with the bank.
# Credit_Limit: this is the credit limit on the credit card owned by customer.
# Total_Revolving_Bal: represents total revolving balance on the credit card.
# Avg_Open_To_Buy: represents the average Open to Buy Credit Line for last 12 months.
# Total_Amt_Chng_Q4_Q1: represents the change in transaction amount from Q4 over Q1.
# Total_Trans_Amt: represents the total transaction amount in the last 12 months.
# Total_Trans_Ct: represents the total transaction count in the last 12 months.
# Total_Ct_Chng_Q4_Q1: represents the change in transaction count from Q4 over Q1.
# Avg_Utilization_Ratio: represents the average card utilization ratio.
data.split <- splitmix(bank_data)
quantitative <- data.split$X.quanti
qualitative <- data.split$X.quali
length(quantitative)
length(qualitative)
#Checking if there is any null value in the data set
colSums(is.na(bank_data)) #no null value
# Descriptive Graphs
#Customer age
#boxplot
cust.age.boxplot <- boxplot(quantitative$Customer_Age, ylab = "age")
cust.age.boxplot
#using the 1st quartile-1.5*IQR and 3rd quartile+1.5*IQR rule,
#it is seen that customers over the age of 70 are outliers
age.exc.list <- boxplot.stats(quantitative$Customer_Age)$out
#Card Category
ggplot(bank_data, aes(x=Months_on_book, y= Credit_Limit, shape = Card_Category, color= Card_Category))+
geom_point() + geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
card.exc.list <- c("Silver", "Platinum", "Gold")
bank_data_bluecard <- subset(bank_data,!(Card_Category %in% card.exc.list))
#bank_data_cleaned <- subset(bank_data_rev,!((Customer_Age %in% age.exc.list)| (Card_Category %in% card.exc.list)))
#bank_data_cleaned
#histogram
Cust.age.hist <- hist(quantitative$Customer_Age, xlab="age", ylab="freq",
main="Customer age distribution", col="orange")
Cust.age.hist
#using the histogram, dividing ages into 4 groups seems satisfying
#Creating age groups
quantitative[quantitative$Customer_Age <= 34, "age_group"] <- 1
quantitative[quantitative$Customer_Age > 34 & quantitative$Customer_Age <= 44, "age_group"] <- 2
quantitative[quantitative$Customer_Age > 44 & quantitative$Customer_Age <= 54, "age_group"] <- 3
quantitative[quantitative$Customer_Age > 54, "age_group"] <- 4
unique(bank_data$Attrition_Flag) #to make sure there are only 2 strings
#change 'Existing Customer' to 1 and 'Attrited Customer' to 0 and add new column to quantitative
quantitative$attrition_flag_binary <- ifelse(bank_data$Attrition_Flag=='Existing Customer', 1, 0)
#grouped age histogram
Grouped.age.hist <- hist(as.numeric(quantitative$age_group), xlab="age_group", ylab="freq", breaks=4,
main="Customer age group distribution", col="green")
# grouped age piechart
library(RColorBrewer)
myPalette <- brewer.pal(5, "Set2")
cust.age.piechart <- pie(count(quantitative, age_group)$n, border="white", col=myPalette)
cust.age.piechart
# months on book (how long a customer is using the bank)
#boxplot
months.onbook.boxplot <- boxplot(quantitative$Months_on_book, ylab = "months")
months.onbook.boxplot
#using the 1st quartile-1.5*IQR and 3rd quartile+1.5*IQR rule, outliers
boxplot.stats(quantitative$Months_on_book)$out
# Credit Limit
#boxplot
credit.limit.boxplot <- boxplot(quantitative$Credit_Limit, ylab = "Dollars")
Dcredit.limit.boxplot
#grouped age histogram
Grouped.age.hist <- hist(as.numeric(quantitative$age_group), xlab="age_group", ylab="freq", breaks=4,
main="Customer age group distribution", col="green")
# grouped age piechart
library(RColorBrewer)
myPalette <- brewer.pal(5, "Set2")
cust.age.piechart <- pie(count(quantitative, age_group)$n, border="white", col=myPalette)
#Card Category
ggplot(bank_data, aes(x=Months_on_book, y= Credit_Limit, shape = Card_Category, color= Card_Category))+
geom_point() + geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
card.exc.list <- c("Silver", "Platinum", "Gold")
#boxplot
cust.age.boxplot <- boxplot(quantitative$Customer_Age, ylab = "age")
cust.age.boxplot
#Checking if there is any null value in the data set
colSums(is.na(bank_data)) #no null value
hist(bank_data$Months_Inactive_12_mon, col = yarrr::transparent('red',trans.val = 0.9))
hist(table(bank_data$Months_Inactive_12_mon), col = yarrr::transparent('red',trans.val = 0.9))
hist(bank_data$Contacts_Count_12_mon, col = yarrr::transparent('blue', trans.val = 0.8), add = TRUE)
hist(table(bank_data$Months_Inactive_12_mon), col = yarrr::transparent('red',trans.val = 0.9))
hist(bank_data$Contacts_Count_12_mon, col = yarrr::transparent('blue', trans.val = 0.8), add = TRUE)
hist(table(bank_data$Contacts_Count_12_mon), col = yarrr::transparent('blue', trans.val = 0.8), add = TRUE)
inactive.months <- table(bank_data$Months_Inactive_12_mon)
contact.count <- table(bank_data$Contacts_Count_12_mon)
hist(inactive.months, col = yarrr::transparent('red',trans.val = 0.9))
hist(contact.count, col = yarrr::transparent('blue', trans.val = 0.8), add = TRUE)
hist(bank_data$Total_Trans_Ct)
#histograms
hist(bank_data$Avg_Utilization_Ratio)
hist(log1p(bank_data$Avg_Utilization_Ratio))
hist(bank_data$Avg_Open_To_Buy)
hist(log1p(bank_data$Avg_Open_To_Buy))
hist(bank_data$Avg_Open_To_Buy)
View(bank_data)
View(quantitative)
Cust.age.hist <- hist(quantitative$Customer_Age, xlab="age", ylab="freq",
main="Customer age distribution", col="orange")
Cust.age.hist
#boxplot
cust.age.boxplot <- boxplot(quantitative$Customer_Age, ylab = "age")
cust.age.boxplot
bank_data_less70 <- subset(bank_data_rev,!(Customer_Age %in% age.exc.list))
bank_data_less70 <- subset(bank_data,!(Customer_Age %in% age.exc.list))
View(bank_data_less70)
bank_data_less70 <- subset(bank_data,!(Customer_Age %in% age.exc.list))
boxplot(bank_data_less70$Customer_Age, ylab = "age")
bank_data_cleaned <- subset(bank_data_rev,!((Customer_Age %in% age.exc.list)| (Card_Category %in% card.exc.list)))
bank_data_cleaned <- subset(quantitative,!((Customer_Age %in% age.exc.list)| (Card_Category %in% card.exc.list)))
bank_data_cleaned <- subset(bank_data,!((Customer_Age %in% age.exc.list)| (Card_Category %in% card.exc.list)))
bank_data_cleaned
View(bank_data_cleaned)
boxplot(bank_data_cleaned$Customer_Age, ylab = "age")
# Descriptive Graphs
#histogram
Cust.age.hist <- hist(bank_data_cleaned$Customer_Age, xlab="age", ylab="freq",
main="Customer age distribution", col="orange")
Cust.age.hist
#Creating age groups
quantitative[quantitative$Customer_Age <= 34, "age_group"] <- 1
quantitative[quantitative$Customer_Age > 34 & quantitative$Customer_Age <= 44, "age_group"] <- 2
quantitative[quantitative$Customer_Age > 44 & quantitative$Customer_Age <= 54, "age_group"] <- 3
quantitative[quantitative$Customer_Age > 54, "age_group"] <- 4
unique(bank_data$Attrition_Flag) #to make sure there are only 2 strings
#change 'Existing Customer' to 1 and 'Attrited Customer' to 0 and add new column to quantitative
quantitative$attrition_flag_binary <- ifelse(bank_data$Attrition_Flag=='Existing Customer', 1, 0)
#Creating age groups
bank_data_cleaned[bank_data_cleaned$Customer_Age <= 34, "age_group"] <- 1
bank_data_cleaned[bank_data_cleaned$Customer_Age > 34 & bank_data_cleaned$Customer_Age <= 44, "age_group"] <- 2
bank_data_cleaned[bank_data_cleaned$Customer_Age > 44 & bank_data_cleaned$Customer_Age <= 54, "age_group"] <- 3
bank_data_cleaned[bank_data_cleaned$Customer_Age > 54, "age_group"] <- 4
#grouped age histogram
Grouped.age.hist <- hist(as.numeric(quantitative$age_group), xlab="age_group", ylab="freq", breaks=4,
main="Customer age group distribution", col="green")
#grouped age histogram
Grouped.age.hist <- hist(as.numeric(bank_data_cleaned$age_group), xlab="age_group", ylab="freq", breaks=4,
main="Customer age group distribution", col="green")
# grouped age piechart
library(RColorBrewer)
myPalette <- brewer.pal(5, "Set2")
cust.age.piechart <- pie(count(bank_data_cleaned, age_group)$n, border="white", col=myPalette)
cust.age.piechart
View(quantitative)
#Dependent Count
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette)
dependent.count.piechart
myPalette <- brewer.pal(6, "Set2")
cust.age.piechart <- pie(count(bank_data_cleaned, age_group)$n, border="white", col=myPalette)
#Dependent Count
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette)
#Dependent Count
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette, labels = Dependent_count)
#Dependent Count
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette, labels = bank_data_cleaned$Dependent_count)
#Dependent Count
depcount.labels <- unique(bank_data_cleaned$Dependent_count)
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette, labels = depcount.labels)
#Dependent Count
depcount.labels <- c(0, 1, 2, 3, 4, 5)
dependent.count.piechart <- pie(count(bank_data_cleaned, Dependent_count)$n, border="white", col=myPalette, labels = depcount.labels)
hist(bank_data_cleaned$Dependent_count)
hist(table(bank_data_cleaned$Dependent_count))
hist(bank_data_cleaned$Dependent_count, width=0.9)
barplot(bank_data_cleaned$Dependent_count, width=0.9)
hist.default(bank_data_cleaned$Dependent_count, width=0.9)
hist(bank_data_cleaned$Dependent_count, width=0.9)
hist(bank_data_cleaned$Dependent_count)
hist(bank_data_cleaned$Dependent_count)
ggplot(bank_data_cleaned, aes(x=Dependent_count)) +
geom_bar(width=.4)
ggplot(bank_data_cleaned, aes(x=Dependent_count)) +
geom_bar(width=1)
# months on book (how long a customer is using the bank)
#histogram
ggplot(bank_data_cleaned, aes(x=Months_on_book)) +
geom_bar(width=1)
hist(bank_data_cleaned$Months_on_book)
#boxplot
months.onbook.boxplot <- boxplot(quantitative$Months_on_book, ylab = "months")
#using the 1st quartile-1.5*IQR and 3rd quartile+1.5*IQR rule, outliers
boxplot.stats(quantitative$Months_on_book)$out
#Total Relationships Count
hist(bank_data_cleaned$Total_Relationship_Count)
#Total Relationships Count
ggplot(bank_data_cleaned, aes(x=Total_Relationship_Count)) +
geom_bar(width=1)
#Months_Inactive_12months
ggplot(bank_data_cleaned, aes(x=Months_Inactive_12_mon)) +
geom_bar(width=1)
#Contacts Count 12 months
ggplot(bank_data_cleaned, aes(x=Contacts_Count_12_mon)) +
geom_bar(width=1)
contacts.count.boxplot <- boxplot(bank_data_cleaned$Contacts_Count_12_mon, ylab = "# of calls")
#boxplot
credit.limit.boxplot <- boxplot(quantitative$Credit_Limit, ylab = "Dollars")
#boxplot
credit.limit.boxplot <- boxplot(bank_data_cleaned$Credit_Limit, ylab = "Dollars")
#histogram
hist(bank_data_cleaned$Credit_Limit)
# Total Revolving Balance
#histogram
hist(bank_data_cleaned$Total_Revolving_Bal)
#Average Open to Buy
#histogram
hist(bank_data_cleaned$Avg_Open_To_Buy)
#histogram
hist(bank_data_cleaned$Total_Amt_Chng_Q4_Q1)
#boxplot
credit.limit.boxplot <- boxplot(bank_data_cleaned$Total_Amt_Chng_Q4_Q1, ylab = "Dollars")
#histogram
hist(bank_data_cleaned$Total_)
#histogram
hist(bank_data_cleaned$Total_Trans_Amt)
#histogram
hist(bank_data_cleaned$Total_Ct_Chng_Q4_Q1)
#histogram
hist(bank_data_cleaned$Avg_Utilization_Ratio)
