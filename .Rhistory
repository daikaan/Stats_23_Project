c_mat_i <- table(test$Attrition_Flag,pred_i)
#Accuracy
mean(pred_i==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_i <- c_mat_i[1,1]/sum(c_mat_i[1,])
Spec_i
#Precision / Positive Predicted Value
Prec_i <- c_mat_i[2,2]/sum(c_mat_i[,2])
Prec_i
#Recall / True Positive Rate / Sensitivity
Rec_i <- c_mat_i[2,2]/sum(c_mat_i[2,])
Rec_i
#F1 Score
F1_i <- 2 * (Prec_i * Rec_i)/(Prec_i + Rec_i)
F1_i
vif(glm_1)
glm_2 <- update(glm_1, . ~ . - log_Avg_Open_To_Buy - Months_on_book)
vif(glm_2)
glm_3 <- update(glm_2, . ~ . + log_Total_Amt_Chng_Q4_Q1*Customer_Age
+ log_Total_Amt_Chng_Q4_Q1*Dependent_count
+ log_Total_Amt_Chng_Q4_Q1*log_Total_Trans_Amt
+ log_Total_Amt_Chng_Q4_Q1*Total_Trans_Ct)
glm_4 <- update(glm_3, . ~ . + Total_Revolving_Bal*log_Credit_Limit
+ Total_Revolving_Bal*Avg_Utilization_Ratio)
glm_5 <- update(glm_4, . ~ . + log_Credit_Limit*Avg_Utilization_Ratio)
glm_6 <- update(glm_5, . ~ . + log_Total_Ct_Chng_Q4_Q1*Is_Female)
glm_7 <- update(glm_6, . ~ . - Education_Level)
glm_8 <- update(glm_7, . ~ .+ Customer_Age*Marital_Status)
summary(glm_8)
AIC(glm_1,glm_2,glm_3,glm_4,glm_5,glm_6,glm_7,glm_8)
i1 <- interact_plot(glm_3,pred = log_Total_Amt_Chng_Q4_Q1,modx = Customer_Age,
outcome.scale = "link")
i2 <- interact_plot(glm_3,pred = log_Total_Amt_Chng_Q4_Q1,modx = Dependent_count,
outcome.scale = "link")
i3 <- interact_plot(glm_3,pred = log_Total_Amt_Chng_Q4_Q1,modx = log_Total_Trans_Amt,
outcome.scale = "link")
i4 <- interact_plot(glm_3,pred = log_Total_Amt_Chng_Q4_Q1,modx = Total_Trans_Ct,
outcome.scale = "link")
i5 <- interact_plot(glm_4,pred = Total_Revolving_Bal,modx = log_Credit_Limit,
outcome.scale = "link")
i6 <- interact_plot(glm_4,pred = Total_Revolving_Bal,modx = Avg_Utilization_Ratio,
outcome.scale = "link")
i7 <- interact_plot(glm_5,pred = log_Credit_Limit,modx = Avg_Utilization_Ratio,
outcome.scale = "link")
i8 <- interact_plot(glm_6,pred = log_Total_Ct_Chng_Q4_Q1,modx = Is_Female,
outcome.scale = "link")
i9 <- interact_plot(glm_8,pred = Customer_Age,modx = Marital_Status ,
outcome.scale = "link")
ggarrange(i1,i6,nrow=2,ncol=1)
#Threshold
Threshold <- 0.4
pred_glm_f <- predict(glm_8,test,type="response")
pred_f <- ifelse(pred_glm_f >= Threshold , 1,0)
#Confusion matrix
c_mat_f <- table(test$Attrition_Flag,pred_f)
#Accuracy
mean(pred_f==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_f <- c_mat_f[1,1]/sum(c_mat_f[1,])
Spec_f
#Precision / Positive Predicted Value
Prec_f <- c_mat_f[2,2]/sum(c_mat_f[,2])
Prec_f
#Recall / True Positive Rate / Sensitivity
Rec_f <- c_mat_f[2,2]/sum(c_mat_f[2,])
Rec_f
#F1 Score
F1_f <- 2 * (Prec_f * Rec_f)/(Prec_f + Rec_f)
F1_f
#ROC curves
roc_i <- roc(test$Attrition_Flag ~ pred_glm_i)
roc_f <- roc(test$Attrition_Flag ~ pred_glm_f)
plot(roc_i, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_f,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for glm_1:", round(roc_i$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for glm_8:", round(roc_f$auc, 3)), col = "blue")
glm_1_bal <- glm(data = train_bal,Attrition_Flag~ .,family = "binomial")
summary(glm_1_bal)
#Threshold
Threshold <- 0.8
pred_glm_i_bal <- predict(glm_1_bal,test,type="response")
pred_i_bal <- ifelse(pred_glm_i_bal >= Threshold , 1,0)
#Confusion matrix
c_mat_i_bal <- table(test$Attrition_Flag,pred_i_bal)
#Accuracy
mean(pred_i_bal==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_i_bal <- c_mat_i_bal[1,1]/sum(c_mat_i_bal[1,])
Spec_i_bal
#Precision / Positive Predicted Value
Prec_i_bal <- c_mat_i_bal[2,2]/sum(c_mat_i_bal[,2])
Prec_i_bal
#Recall / True Positive Rate / Sensitivity
Rec_i_bal <- c_mat_i_bal[2,2]/sum(c_mat_i_bal[2,])
Rec_i_bal
#F1 Score
F1_i_bal <- 2 * (Prec_i_bal * Rec_i_bal)/(Prec_i_bal + Rec_i_bal)
F1_i_bal
vif(glm_1_bal)
glm_2_bal <- update(glm_1_bal, . ~ . - log_Avg_Open_To_Buy - Months_on_book)
vif(glm_2_bal)
glm_3_bal <- update(glm_2_bal, . ~ . + log_Total_Amt_Chng_Q4_Q1*Customer_Age +
log_Total_Amt_Chng_Q4_Q1*Dependent_count +
log_Total_Amt_Chng_Q4_Q1*log_Total_Trans_Amt)
glm_4_bal <- update(glm_3_bal, . ~ . + Total_Revolving_Bal*log_Credit_Limit +
Total_Revolving_Bal*Avg_Utilization_Ratio)
glm_5_bal <- update(glm_4_bal, . ~ . + log_Credit_Limit*Avg_Utilization_Ratio)
glm_6_bal <- update(glm_5_bal, . ~ . + log_Total_Ct_Chng_Q4_Q1*Is_Female)
glm_7_bal <- update(glm_6_bal, . ~ . + Customer_Age*Marital_Status)
summary(glm_7_bal)
AIC(glm_1_bal,glm_2_bal,glm_3_bal,glm_4_bal,glm_5_bal,glm_6_bal,glm_7_bal)
#Threshold
Threshold <- 0.7
pred_glm_f_bal <- predict(glm_7_bal,test,type="response")
pred_f_bal <- ifelse(pred_glm_f_bal >= Threshold , 1,0)
#Confusion matrix
c_mat_f_bal <- table(test$Attrition_Flag,pred_f_bal)
#Accuracy
mean(pred_f_bal==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_f_bal <- c_mat_f_bal[1,1]/sum(c_mat_f_bal[1,])
Spec_f_bal
#Precision / Positive Predicted Value
Prec_f_bal <- c_mat_f_bal[2,2]/sum(c_mat_f_bal[,2])
Prec_f_bal
#Recall / True Positive Rate / Sensitivity
Rec_f_bal <- c_mat_f_bal[2,2]/sum(c_mat_f_bal[2,])
Rec_f_bal
#F1 Score
F1_f_bal <- 2 * (Prec_f_bal * Rec_f_bal)/(Prec_f_bal + Rec_f_bal)
F1_f_bal
#ROC curves
roc_i_bal <- roc(test$Attrition_Flag ~ pred_glm_i_bal)
roc_f_bal <- roc(test$Attrition_Flag ~ pred_glm_f_bal)
plot(roc_i_bal, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_f_bal,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for glm_1_bal:", round(roc_i_bal$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for glm_7_bal:", round(roc_f_bal$auc, 3)), col = "blue")
# We can see that the continuous predictor variables don't follow a normal
# distribution on both classes
apply(train[train$Attrition_Flag == 1,][17:18],2,shapiro.test )
apply(train[train$Attrition_Flag == 0,][17:18],2,shapiro.test )
lda_u <- lda(Attrition_Flag ~ Customer_Age + Is_Female + Dependent_count
+ Marital_Status + Income_Category + Total_Relationship_Count
+ Months_Inactive_12_mon + Contacts_Count_12_mon + log_Credit_Limit
+ Total_Revolving_Bal + log_Total_Amt_Chng_Q4_Q1
+ log_Total_Trans_Amt + Total_Trans_Ct + log_Total_Ct_Chng_Q4_Q1
+ Avg_Utilization_Ratio + Customer_Age:log_Total_Amt_Chng_Q4_Q1
+ Dependent_count:log_Total_Amt_Chng_Q4_Q1
+ log_Total_Amt_Chng_Q4_Q1:log_Total_Trans_Amt
+ log_Total_Amt_Chng_Q4_Q1:Total_Trans_Ct
+ log_Credit_Limit:Total_Revolving_Bal
+ Total_Revolving_Bal:Avg_Utilization_Ratio
+ log_Credit_Limit:Avg_Utilization_Ratio
+ Is_Female:log_Total_Ct_Chng_Q4_Q1 + Customer_Age:Marital_Status ,
data = train, family = "binomial")
lda_u
#Threshold
Threshold <- 0.4
lda_u_predict <- predict(lda_u,test,type = "response")
lda_predict_u <- lda_u_predict$posterior
pred_lda_u <- ifelse(lda_predict_u[,2] >= Threshold , 1,0)
#Confusion matrix
c_mat_lda_u <- table(test$Attrition_Flag,pred_lda_u)
#Accuracy
mean(pred_lda_u==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_lda_u <- c_mat_lda_u[1,1]/sum(c_mat_lda_u[1,])
Spec_lda_u
#Precision / Positive Predicted Value
Prec_lda_u <- c_mat_lda_u[2,2]/sum(c_mat_lda_u[,2])
Prec_lda_u
#Recall / True Positive Rate / Sensitivity
Rec_lda_u <- c_mat_lda_u[2,2]/sum(c_mat_lda_u[2,])
Rec_lda_u
#F1 Score
F1_lda_u <- 2 * (Prec_lda_u * Rec_lda_u)/(Prec_lda_u + Rec_lda_u)
F1_lda_u
# x indicates the linear combinations of the variables obtained by the model
# class indicates the two classes Existing and Attriting Customers.
ldahist(lda_u_predict$x[,1], g = lda_u_predict$class , col = 2)
lda_b <- lda(Attrition_Flag ~ Customer_Age + Is_Female + Dependent_count
+ Education_Level + Marital_Status + Income_Category
+ Total_Relationship_Count + Months_Inactive_12_mon
+ Contacts_Count_12_mon + log_Credit_Limit + Total_Revolving_Bal
+ log_Total_Amt_Chng_Q4_Q1 + log_Total_Trans_Amt + Total_Trans_Ct
+ log_Total_Ct_Chng_Q4_Q1  + Avg_Utilization_Ratio
+ Customer_Age:log_Total_Amt_Chng_Q4_Q1
+ Dependent_count:log_Total_Amt_Chng_Q4_Q1
+ log_Total_Amt_Chng_Q4_Q1:log_Total_Trans_Amt
+ log_Credit_Limit:Total_Revolving_Bal
+ Total_Revolving_Bal:Avg_Utilization_Ratio
+ log_Credit_Limit:Avg_Utilization_Ratio
+ Is_Female:log_Total_Ct_Chng_Q4_Q1 + Customer_Age:Marital_Status ,
data = train_bal, family = "binomial")
lda_b
#Threshold
Threshold <- 0.8
lda_b_predict <- predict(lda_b,test,type = "response")
lda_predict_b <- lda_b_predict$posterior
pred_lda_b <- ifelse(lda_predict_b[,2] >= Threshold , 1,0)
#Confusion matrix
c_mat_lda_b <- table(test$Attrition_Flag,pred_lda_b)
#Accuracy
mean(pred_lda_b==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_lda_b <- c_mat_lda_b[1,1]/sum(c_mat_lda_b[1,])
Spec_lda_b
#Precision / Positive Predicted Value
Prec_lda_b <- c_mat_lda_b[2,2]/sum(c_mat_lda_b[,2])
Prec_lda_b
#Recall / True Positive Rate / Sensitivity
Rec_lda_b <- c_mat_lda_b[2,2]/sum(c_mat_lda_b[2,])
Rec_lda_b
#F1 Score
F1_lda_b <- 2 * (Prec_lda_b * Rec_lda_b)/(Prec_lda_b + Rec_lda_b)
F1_lda_b
# x indicates the linear combinations of the variables obtained by the model
# class indicates the two classes Existing and Attriting Customers.
ldahist(lda_b_predict$x[,1], g = lda_b_predict$class , col = 2)
#ROC curves
roc_lda_u <- roc(test$Attrition_Flag ~ lda_predict_u[,2])
roc_lda_b <- roc(test$Attrition_Flag ~ lda_predict_b[,2])
plot(roc_lda_u, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_lda_b,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for lda_u:", round(roc_lda_u$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for lda_b:", round(roc_lda_b$auc, 3)), col = "blue")
qda_u <- qda(Attrition_Flag ~ Customer_Age + Is_Female + Dependent_count
+ Marital_Status + Income_Category + Total_Relationship_Count
+ Months_Inactive_12_mon + Contacts_Count_12_mon + log_Credit_Limit
+ Total_Revolving_Bal + log_Total_Amt_Chng_Q4_Q1
+ log_Total_Trans_Amt + Total_Trans_Ct + log_Total_Ct_Chng_Q4_Q1
+ Avg_Utilization_Ratio + Customer_Age:log_Total_Amt_Chng_Q4_Q1
+ Dependent_count:log_Total_Amt_Chng_Q4_Q1
+ log_Total_Amt_Chng_Q4_Q1:log_Total_Trans_Amt
+ log_Total_Amt_Chng_Q4_Q1:Total_Trans_Ct
+ log_Credit_Limit:Total_Revolving_Bal
+ Total_Revolving_Bal:Avg_Utilization_Ratio
+ log_Credit_Limit:Avg_Utilization_Ratio
+ Is_Female:log_Total_Ct_Chng_Q4_Q1 + Customer_Age:Marital_Status ,
data = train, family = "binomial")
qda_u
#Threshold
Threshold <- 0.4
qda_u_predict <- predict(qda_u,test,type = "response")
qda_predict_u <- qda_u_predict$posterior
pred_qda_u <- ifelse(qda_predict_u[,2] >= Threshold , 1,0)
#Confusion matrix
c_mat_qda_u <- table(test$Attrition_Flag,pred_qda_u)
#Accuracy
mean(pred_qda_u==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_qda_u <- c_mat_qda_u[1,1]/sum(c_mat_qda_u[1,])
Spec_qda_u
#Precision / Positive Predicted Value
Prec_qda_u <- c_mat_qda_u[2,2]/sum(c_mat_qda_u[,2])
Prec_qda_u
#Recall / True Positive Rate / Sensitivity
Rec_qda_u <- c_mat_qda_u[2,2]/sum(c_mat_qda_u[2,])
Rec_qda_u
#F1 Score
F1_qda_u <- 2 * (Prec_qda_u * Rec_qda_u)/(Prec_qda_u + Rec_qda_u)
F1_qda_u
qda_b <- qda(Attrition_Flag ~ Customer_Age + Is_Female + Dependent_count
+ Education_Level + Marital_Status + Income_Category
+ Total_Relationship_Count + Months_Inactive_12_mon
+ Contacts_Count_12_mon + log_Credit_Limit + Total_Revolving_Bal
+ log_Total_Amt_Chng_Q4_Q1 + log_Total_Trans_Amt + Total_Trans_Ct
+ log_Total_Ct_Chng_Q4_Q1  + Avg_Utilization_Ratio
+ Customer_Age:log_Total_Amt_Chng_Q4_Q1
+ Dependent_count:log_Total_Amt_Chng_Q4_Q1
+ log_Total_Amt_Chng_Q4_Q1:log_Total_Trans_Amt
+ log_Credit_Limit:Total_Revolving_Bal
+ Total_Revolving_Bal:Avg_Utilization_Ratio
+ log_Credit_Limit:Avg_Utilization_Ratio
+ Is_Female:log_Total_Ct_Chng_Q4_Q1 + Customer_Age:Marital_Status ,
data = train_bal, family = "binomial")
qda_b
#Threshold
Threshold <- 0.8
qda_b_predict <- predict(qda_b,test,type = "response")
qda_predict_b <- qda_b_predict$posterior
pred_qda_b <- ifelse(qda_predict_b[,2] >= Threshold , 1,0)
#Confusion matrix
c_mat_qda_b <- table(test$Attrition_Flag,pred_qda_b)
#Accuracy
mean(pred_qda_b==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_qda_b <- c_mat_qda_b[1,1]/sum(c_mat_qda_b[1,])
Spec_qda_b
#Precision / Positive Predicted Value
Prec_qda_b <- c_mat_qda_b[2,2]/sum(c_mat_qda_b[,2])
Prec_qda_b
#Recall / True Positive Rate / Sensitivity
Rec_qda_b <- c_mat_qda_b[2,2]/sum(c_mat_qda_b[2,])
Rec_qda_b
#F1 Score
F1_qda_b <- 2 * (Prec_qda_b * Rec_qda_b)/(Prec_qda_b + Rec_qda_b)
F1_qda_b
#ROC curves
roc_qda_u <- roc(test$Attrition_Flag ~ qda_predict_u[,2])
roc_qda_b <- roc(test$Attrition_Flag ~ qda_predict_b[,2])
plot(roc_qda_u, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_qda_b,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for qda_u:", round(roc_qda_u$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for qda_b:", round(roc_qda_b$auc, 3)), col = "blue")
#Creation of train and test set with interactions
train_int <- data.frame(train)
train_int$log_Total_Amt_Chng_Q4_Q1_Customer_Age <-
train$log_Total_Amt_Chng_Q4_Q1 * train$Customer_Age
train_int$log_Total_Amt_Chng_Q4_Q1_Dependent_count <-
train$log_Total_Amt_Chng_Q4_Q1 * train$Dependent_count
train_int$log_Total_Amt_Chng_Q4_Q1_log_Total_Trans_Amt <-
train$log_Total_Amt_Chng_Q4_Q1*train$log_Total_Trans_Amt
train_int$log_Total_Amt_Chng_Q4_Q1_Total_Trans_Ct <-
train$log_Total_Amt_Chng_Q4_Q1 * train$Total_Trans_Ct
train_int$log_Credit_Limit_Total_Revolving_Bal <-
train$log_Credit_Limit * train$Total_Revolving_Bal
train_int$Total_Revolving_Bal_Avg_Utilization_Ratio <-
train$Total_Revolving_Bal * train$Avg_Utilization_Ratio
train_int$log_Credit_Limit_Avg_Utilization_Ratio <-
train$log_Credit_Limit * train$Avg_Utilization_Ratio
train_int$Is_Female_log_Total_Ct_Chng_Q4_Q1 <-
train$Is_Female * train$log_Total_Ct_Chng_Q4_Q1
train_int$Customer_Age_Marital_Status <-
train$Customer_Age * train$Marital_Status
test_int <- data.frame(test)
test_int$log_Total_Amt_Chng_Q4_Q1_Customer_Age <-
test$log_Total_Amt_Chng_Q4_Q1 * test$Customer_Age
test_int$log_Total_Amt_Chng_Q4_Q1_Dependent_count <-
test$log_Total_Amt_Chng_Q4_Q1 * test$Dependent_count
test_int$log_Total_Amt_Chng_Q4_Q1_log_Total_Trans_Amt <-
test$log_Total_Amt_Chng_Q4_Q1 * test$log_Total_Trans_Amt
test_int$log_Total_Amt_Chng_Q4_Q1_Total_Trans_Ct <-
test$log_Total_Amt_Chng_Q4_Q1 * test$Total_Trans_Ct
test_int$log_Credit_Limit_Total_Revolving_Bal <-
test$log_Credit_Limit * test$Total_Revolving_Bal
test_int$Total_Revolving_Bal_Avg_Utilization_Ratio <-
test$Total_Revolving_Bal * test$Avg_Utilization_Ratio
test_int$log_Credit_Limit_Avg_Utilization_Ratio <-
test$log_Credit_Limit * test$Avg_Utilization_Ratio
test_int$Is_Female_log_Total_Ct_Chng_Q4_Q1 <-
test$Is_Female * test$log_Total_Ct_Chng_Q4_Q1
test_int$Customer_Age_Marital_Status <-
test$Customer_Age * test$Marital_Status
#Creation of train_bal and test set with interactions
train_bal_int <- data.frame(train_bal)
train_bal_int$log_Total_Amt_Chng_Q4_Q1_Customer_Age <-
train_bal$log_Total_Amt_Chng_Q4_Q1 * train_bal$Customer_Age
train_bal_int$log_Total_Amt_Chng_Q4_Q1_Dependent_count <-
train_bal$log_Total_Amt_Chng_Q4_Q1 * train_bal$Dependent_count
train_bal_int$log_Total_Amt_Chng_Q4_Q1_log_Total_Trans_Amt <-
train_bal$log_Total_Amt_Chng_Q4_Q1 * train_bal$log_Total_Trans_Amt
train_bal_int$log_Credit_Limit_Total_Revolving_Bal <-
train_bal$log_Credit_Limit * train_bal$Total_Revolving_Bal
train_bal_int$Total_Revolving_Bal_Avg_Utilization_Ratio <-
train_bal$Total_Revolving_Bal * train_bal$Avg_Utilization_Ratio
train_bal_int$log_Credit_Limit_Avg_Utilization_Ratio <-
train_bal$log_Credit_Limit * train_bal$Avg_Utilization_Ratio
train_bal_int$Is_Female_log_Total_Trans_Ct_Q4_Q1 <-
train_bal$Is_Female * train_bal$log_Total_Ct_Chng_Q4_Q1
train_bal_int$Customer_Age_Marital_Status <-
train_bal$Customer_Age * train_bal$Marital_Status
test_bal_int <- data.frame(test)
test_bal_int$log_Total_Amt_Chng_Q4_Q1_Customer_Age <-
test$log_Total_Amt_Chng_Q4_Q1 * test$Customer_Age
test_bal_int$log_Total_Amt_Chng_Q4_Q1_Dependent_count <-
test$log_Total_Amt_Chng_Q4_Q1 * test$Dependent_count
test_bal_int$log_Total_Amt_Chng_Q4_Q1_log_Total_Trans_Amt <-
test$log_Total_Amt_Chng_Q4_Q1 * test$log_Total_Trans_Amt
test_bal_int$log_Credit_Limit_Total_Revolving_Bal <-
test$log_Credit_Limit * test$Total_Revolving_Bal
test_bal_int$Total_Revolving_Bal_Avg_Utilization_Ratio <-
test$Total_Revolving_Bal * test$Avg_Utilization_Ratio
test_bal_int$log_Credit_Limit_Avg_Utilization_Ratio <-
test$log_Credit_Limit * test$Avg_Utilization_Ratio
test_bal_int$Is_Female_log_Total_Trans_Ct_Q4_Q1 <-
test$Is_Female * test$log_Total_Ct_Chng_Q4_Q1
test_bal_int$Customer_Age_Marital_Status <-
test$Customer_Age * test$Marital_Status
# Matrix without Attrition_Flag, Education_Level , Months_on_book and log_Avg_Open_To_Buy
train_mat <- data.matrix(train_int[,-c(1,5,8,14)])
test_mat <- data.matrix(test_int[,-c(1,5,8,14)])
ridge_u <- cv.glmnet(train_mat,train$Attrition_Flag, alpha = 0,
family = "binomial", type.measure = "class")
plot(ridge_u)
lambda_ridge_u <- ridge_u$lambda.min
lambda_ridge_u
#Threshold
Threshold <- 0.3
ridge_predict_u <- predict(ridge_u,test_mat,type = "response", s = lambda_ridge_u)
pred_ridge_u <- ifelse(ridge_predict_u >= Threshold , 1,0)
#Confusion matrix
c_mat_ridge_u <- table(test$Attrition_Flag,pred_ridge_u)
#Accuracy
mean(pred_ridge_u==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_ridge_u <- c_mat_ridge_u[1,1]/sum(c_mat_ridge_u[1,])
Spec_ridge_u
#Precision / Positive Predicted Value
Prec_ridge_u <- c_mat_ridge_u[2,2]/sum(c_mat_ridge_u[,2])
Prec_ridge_u
#Recall / True Positive Rate / Sensitivity
Rec_ridge_u <- c_mat_ridge_u[2,2]/sum(c_mat_ridge_u[2,])
Rec_ridge_u
#F1 Score
F1_ridge_u <- 2 * (Prec_ridge_u * Rec_ridge_u)/(Prec_ridge_u + Rec_ridge_u)
F1_ridge_u
# Matrix without Attrition_Flag, Months_on_book and log_Avg_Open_To_Buy
train_mat_b <- data.matrix(train_bal_int[,-c(1,8,14)])
test_mat_b <- data.matrix(test_bal_int[,-c(1,8,14)])
ridge_b <- cv.glmnet(train_mat_b,train_bal$Attrition_Flag, alpha = 0,
family = "binomial", type.measure = "class")
plot(ridge_b)
lambda_ridge_b <- ridge_b$lambda.min
lambda_ridge_b
#Threshold
Threshold <- 0.6
ridge_predict_b <- predict(ridge_b,test_mat_b,type = "response", s = lambda_ridge_b)
pred_ridge_b <- ifelse(ridge_predict_b >= Threshold , 1,0)
#Confusion matrix
c_mat_ridge_b <- table(test$Attrition_Flag,pred_ridge_b)
#Accuracy
mean(pred_ridge_b==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_ridge_b <- c_mat_ridge_b[1,1]/sum(c_mat_ridge_b[1,])
Spec_ridge_b
#Precision / Positive Predicted Value
Prec_ridge_b <- c_mat_ridge_b[2,2]/sum(c_mat_ridge_b[,2])
Prec_ridge_b
#Recall / True Positive Rate / Sensitivity
Rec_ridge_b <- c_mat_ridge_b[2,2]/sum(c_mat_ridge_b[2,])
Rec_ridge_b
#F1 Score
F1_ridge_b <- 2 * (Prec_ridge_b * Rec_ridge_b)/(Prec_ridge_b + Rec_ridge_b)
F1_ridge_b
#ROC curves
roc_ridge_u <- roc(test$Attrition_Flag ~ as.numeric(ridge_predict_u))
roc_ridge_b <- roc(test$Attrition_Flag ~ as.numeric(ridge_predict_b))
plot(roc_ridge_u, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_ridge_b,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for ridge_u:", round(roc_ridge_u$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for ridge_b:", round(roc_ridge_b$auc, 3)), col = "blue")
# Matrix without Attrition_Flag
train_mat <- data.matrix(train_int[,-c(1)])
test_mat <- data.matrix(test_int[,-c(1)])
lasso_u <- cv.glmnet(train_mat,train$Attrition_Flag, alpha = 1,
family = "binomial", type.measure = "class")
plot(lasso_u)
lambda_lasso_u <- lasso_u$lambda.min
lambda_lasso_u
#Threshold
Threshold <- 0.4
lasso_predict_u <- predict(lasso_u,test_mat,type = "response", s = lambda_lasso_u)
pred_lasso_u <- ifelse(lasso_predict_u >= Threshold , 1,0)
#Confusion matrix
c_mat_lasso_u <- table(test$Attrition_Flag,pred_lasso_u)
#Accuracy
mean(pred_lasso_u==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_lasso_u <- c_mat_lasso_u[1,1]/sum(c_mat_lasso_u[1,])
Spec_lasso_u
#Precision / Positive Predicted Value
Prec_lasso_u <- c_mat_lasso_u[2,2]/sum(c_mat_lasso_u[,2])
Prec_lasso_u
#Recall / True Positive Rate / Sensitivity
Rec_lasso_u <- c_mat_lasso_u[2,2]/sum(c_mat_lasso_u[2,])
Rec_lasso_u
#F1 Score
F1_lasso_u <- 2 * (Prec_lasso_u * Rec_lasso_u)/(Prec_lasso_u + Rec_lasso_u)
F1_lasso_u
# Matrix without Attrition_Flag
train_mat_b <- data.matrix(train_bal_int[,-c(1)])
test_mat_b <- data.matrix(test_bal_int[,-c(1)])
lasso_b <- cv.glmnet(train_mat_b,train_bal$Attrition_Flag, alpha = 1,
family = "binomial", type.measure = "class")
plot(lasso_b)
lambda_lasso_b <- lasso_b$lambda.min
lambda_lasso_b
#Threshold
Threshold <- 0.8
lasso_predict_b <- predict(lasso_b,test_mat_b,type = "response", s = lambda_lasso_b)
pred_lasso_b <- ifelse(lasso_predict_b >= Threshold , 1,0)
#Confusion matrix
c_mat_lasso_b <- table(test$Attrition_Flag,pred_lasso_b)
#Accuracy
mean(pred_lasso_b==test$Attrition_Flag)*100
#True Negative Rate / Specificity
Spec_lasso_b <- c_mat_lasso_b[1,1]/sum(c_mat_lasso_b[1,])
Spec_lasso_b
#Precision / Positive Predicted Value
Prec_lasso_b <- c_mat_lasso_b[2,2]/sum(c_mat_lasso_b[,2])
Prec_lasso_b
#Recall / True Positive Rate / Sensitivity
Rec_lasso_b <- c_mat_lasso_b[2,2]/sum(c_mat_lasso_b[2,])
Rec_lasso_b
#F1 Score
F1_lasso_b <- 2 * (Prec_lasso_b * Rec_lasso_b)/(Prec_lasso_b + Rec_lasso_b)
F1_lasso_b
#ROC curves
roc_lasso_u <- roc(test$Attrition_Flag ~ as.numeric(lasso_predict_u))
roc_lasso_b <- roc(test$Attrition_Flag ~ as.numeric(lasso_predict_b))
plot(roc_lasso_u, col = "black",print.auc = FALSE, auc.polygon = TRUE,
max.auc.polygon = TRUE, lwd=2)
plot(roc_lasso_b,add = TRUE,col = "blue", print.auc = FALSE, lwd=2)
text(0.3, 0.45, paste("AUC for lasso_u:", round(roc_lasso_u$auc, 3)), col = "black")
text(0.3, 0.38, paste("AUC for lasso_b:", round(roc_lasso_b$auc, 3)), col = "blue")
